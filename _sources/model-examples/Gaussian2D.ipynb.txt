{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3bd88ee9-8761-4053-8f94-4fd99b0576df",
   "metadata": {},
   "source": [
    "## 2D Gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e2210ea-ad2e-4a9b-a25b-dd4cfc318ea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "X, Y = np.mgrid[-10:10:100j,-9:9:99j]\n",
    "\n",
    "from lamatrix import Gaussian2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "174d3da9-b9ad-4e6b-8485-dbee07d18071",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\\[f(\\mathbf{y}, \\mathbf{x}) = w_{0} \\frac{1}{2\\pi\\sigma_x\\sigma_y\\sqrt{1 - \\rho^2}} e^{- \\frac{1}{2(1-\\rho^2)} \\left[\\frac{(\\mathbf{x} - \\mu_x)^2}{2\\sigma_x^2} + \\frac{(\\mathbf{y} - \\mu_y)^2}{2\\sigma_y^2} - \\frac{2\\rho(\\mathbf{x} - \\mu_x)(\\mathbf{y} - \\mu_y)}{\\sigma_x\\sigma_y}\\right]}\\]</div>"
      ],
      "text/plain": [
       "'\\\\[f(\\\\mathbf{y}, \\\\mathbf{x}) = w_{0} \\\\frac{1}{2\\\\pi\\\\sigma_x\\\\sigma_y\\\\sqrt{1 - \\\\rho^2}} e^{- \\\\frac{1}{2(1-\\\\rho^2)} \\\\left[\\\\frac{(\\\\mathbf{x} - \\\\mu_x)^2}{2\\\\sigma_x^2} + \\\\frac{(\\\\mathbf{y} - \\\\mu_y)^2}{2\\\\sigma_y^2} - \\\\frac{2\\\\rho(\\\\mathbf{x} - \\\\mu_x)(\\\\mathbf{y} - \\\\mu_y)}{\\\\sigma_x\\\\sigma_y}\\\\right]}\\\\]'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Gaussian2D().equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b73a16d1-6b07-4857-aaca-086d4362ff59",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Gaussian2D('x', 'y', sigma_x=2, sigma_y=2, mu_x=0, mu_y=0, rho=0.8)\n",
    "w = np.random.uniform(0, 1, size=model.width)\n",
    "sample = model.design_matrix(x=X, y=Y).dot(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc27be3e-b238-4c8c-8ec5-3f0a22114e15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.imshow(sample, cmap='Greys')\n",
    "ax.set(xlabel='$x$', ylabel='$y$', title='Gaussian2D model sample');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ad0f30f-cc69-498c-be88-69c00dd869c1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
